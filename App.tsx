import React, { useState, useCallback, useEffect, useRef } from 'react';
import { InputPanel } from './components/InputPanel';
import { ChatPanel } from './components/ChatPanel';
import { classifyProblem, getGuidance } from './services/geminiService';
import { checkCompliance, roughDetectTags, detectFormulaIntent } from './services/curriculumService';
import { useTheme } from './hooks/useTheme';
// Fix: Import `GeneralFeedbackCategory` type to resolve multiple 'Cannot find name' errors.
import type { Message, Grade, HintLevel, Mode, ComplianceResult, FeedbackStatus, GuidanceContext, FeedbackEvent, GeneralFeedback, Session, ChangeGradeSuggestion, GeneralFeedbackCategory, FontSize } from './types';
import { ChartBar, ListChecks, MessageSquareWarning, History, Trash2, Download, AssistantIcon, SunIcon, MoonIcon, FontSizeIcon } from './components/icons';
import Lightbox from './components/Lightbox';

const WELCOME_MESSAGE: Message = {
  id: 'welcome-0',
  role: 'assistant',
  content: `üëã Ch√†o em!
H√£y l√†m theo c√°c b∆∞·ªõc sau ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc c√πng Tr·ª£ l√Ω T∆∞ duy To√°n h·ªçc nh√©:

1Ô∏è‚É£ Ch·ªçn kh·ªëi l·ªõp (6, 7, 8 ho·∫∑c 9) cho ƒë√∫ng v·ªõi m√¨nh.
2Ô∏è‚É£ Nh·∫≠p ƒë·ªÅ b√†i To√°n ho·∫∑c t·∫£i ·∫£nh ch·ª•p ƒë·ªÅ l√™n.
3Ô∏è‚É£ Nh·∫•n ‚ÄúL·∫•y g·ª£i √Ω‚Äù, h·ªá th·ªëng s·∫Ω g·ª£i m·ªü c√°ch suy nghƒ© v√† h∆∞·ªõng l√†m, gi√∫p em t·ª± t√¨m ra l·ªùi gi·∫£i.

üí° L∆∞u √Ω: ·ª®ng d·ª•ng kh√¥ng cho ƒë√°p √°n s·∫µn, m√† ch·ªâ h·ªèi ‚Äì g·ª£i √Ω ‚Äì d·∫´n d·∫Øt ƒë·ªÉ em t·ª± hi·ªÉu, t·ª± l√†m v√† y√™u th√≠ch m√¥n To√°n h∆°n!`,
};

const AnalyticsPanel: React.FC<{ log: FeedbackEvent[]; onClose: () => void }> = ({ log, onClose }) => {
    const stats = log.reduce((acc, item) => {
        acc[item.status] = (acc[item.status] || 0) + 1;
        return acc;
    }, {} as Record<FeedbackStatus, number>);

    return (
        <div className="fixed inset-0 bg-black/30 z-50 flex justify-center items-center p-4" onClick={onClose}>
            <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl w-full max-w-2xl max-h-[80vh] flex flex-col" onClick={e => e.stopPropagation()}>
                <header className="moet-header p-4 flex justify-between items-center rounded-t-2xl">
                    <h2 className="text-lg font-bold">B·∫£ng ph√¢n t√≠ch ph·∫£n h·ªìi</h2>
                    <button onClick={onClose} className="text-white/80 hover:text-white text-2xl leading-none">&times;</button>
                </header>
                <div className="p-4 overflow-y-auto">
                    <div className="grid grid-cols-3 gap-4 mb-4 text-center">
                        <div className="p-3 bg-green-50 dark:bg-green-900/50 rounded-lg"><div className="text-2xl font-bold text-green-700 dark:text-green-400">{stats.understood || 0}</div><div className="text-sm text-green-600 dark:text-green-500">Hi·ªÉu r·ªìi</div></div>
                        <div className="p-3 bg-yellow-50 dark:bg-yellow-900/50 rounded-lg"><div className="text-2xl font-bold text-yellow-700 dark:text-yellow-400">{stats.needs_more || 0}</div><div className="text-sm text-yellow-600 dark:text-yellow-500">C·∫ßn g·ª£i √Ω</div></div>
                        <div className="p-3 bg-red-50 dark:bg-red-900/50 rounded-lg"><div className="text-2xl font-bold text-red-700 dark:text-red-400">{stats.too_hard || 0}</div><div className="text-sm text-red-600 dark:text-red-500">Kh√≥ qu√°</div></div>
                    </div>
                    <table className="w-full text-sm text-left">
                        <thead className="bg-slate-100 dark:bg-slate-700">
                            <tr>
                                <th className="p-2 text-slate-800 dark:text-slate-200">Th·ªùi gian</th>
                                <th className="p-2 text-slate-800 dark:text-slate-200">L·ªõp</th>
                                <th className="p-2 text-slate-800 dark:text-slate-200">ƒê·ªÅ b√†i (t√≥m t·∫Øt)</th>
                                <th className="p-2 text-slate-800 dark:text-slate-200">Ph·∫£n h·ªìi</th>
                            </tr>
                        </thead>
                        <tbody>
                            {log.slice().reverse().map(item => (
                                <tr key={item.id} className="border-b border-slate-200 dark:border-slate-700">
                                    <td className="p-2 text-xs text-slate-500 dark:text-slate-400">{new Date(item.timestamp).toLocaleString()}</td>
                                    <td className="p-2 dark:text-slate-300">{item.grade}</td>
                                    <td className="p-2 italic text-slate-600 dark:text-slate-400">"{item.problem.substring(0, 50)}..."</td>
                                    <td className="p-2 font-semibold" style={{ color: item.status === 'understood' ? '#22c55e' : item.status === 'needs_more' ? '#f59e0b' : '#ef4444' }}>
                                        {item.status === 'understood' ? 'Hi·ªÉu r·ªìi' : item.status === 'needs_more' ? 'C·∫ßn g·ª£i √Ω' : 'Kh√≥ qu√°'}
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

const FeedbackModal: React.FC<{
  onClose: () => void;
  onSubmit: (category: GeneralFeedbackCategory, content: string) => void;
}> = ({ onClose, onSubmit }) => {
  const [category, setCategory] = useState<GeneralFeedbackCategory>('bug');
  const [content, setContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (content.trim().length < 10) {
      alert('Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi d√†i h∆°n 10 k√Ω t·ª±.');
      return;
    }
    setIsSubmitting(true);
    onSubmit(category, content);
  };

  return (
    <div className="fixed inset-0 bg-black/30 z-50 flex justify-center items-center p-4" onClick={onClose}>
      <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl w-full max-w-2xl" onClick={e => e.stopPropagation()}>
        <header className="moet-header p-5 flex justify-between items-center rounded-t-2xl">
          <h2 className="text-lg font-bold">G·ª≠i ph·∫£n h·ªìi</h2>
          <button onClick={onClose} className="text-white/80 hover:text-white text-2xl leading-none">&times;</button>
        </header>
        <form onSubmit={handleSubmit}>
          <div className="p-6 space-y-6">
            <div>
              <label htmlFor="feedback-category" className="block text-base font-semibold text-slate-700 dark:text-slate-300 mb-2">Ph√¢n lo·∫°i ph·∫£n h·ªìi</label>
              <select
                id="feedback-category"
                value={category}
                onChange={(e) => setCategory(e.target.value as GeneralFeedbackCategory)}
                className="w-full p-3 text-base border border-slate-300 dark:border-slate-600 rounded-xl bg-white dark:bg-slate-700 dark:text-slate-200 focus:ring-2 focus:ring-blue-500"
              >
                <option value="bug">B√°o l·ªói</option>
                <option value="suggestion">G√≥p √Ω t√≠nh nƒÉng</option>
                <option value="content">N·ªôi dung kh√¥ng ph√π h·ª£p</option>
                <option value="other">Kh√°c</option>
              </select>
            </div>
            <div>
              <label htmlFor="feedback-content" className="block text-base font-semibold text-slate-700 dark:text-slate-300 mb-2">N·ªôi dung chi ti·∫øt</label>
              <textarea
                id="feedback-content"
                value={content}
                onChange={(e) => setContent(e.target.value)}
                placeholder="M√¥ t·∫£ l·ªói b·∫°n g·∫∑p, ho·∫∑c √Ω t∆∞·ªüng c·ªßa b·∫°n ƒë·ªÉ c·∫£i thi·ªán ·ª©ng d·ª•ng..."
                rows={6}
                required
                minLength={10}
                className="w-full p-3 text-base border border-slate-300 dark:border-slate-600 rounded-xl bg-white dark:bg-slate-700 dark:text-slate-200 min-h-[160px] focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          <footer className="p-4 bg-slate-50 dark:bg-slate-900/50 border-t border-slate-200 dark:border-slate-700 rounded-b-2xl flex justify-end gap-3">
            <button type="button" onClick={onClose} className="px-5 py-2.5 rounded-xl font-semibold text-base text-slate-700 dark:text-slate-200 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-100 dark:hover:bg-slate-600">
              Hu·ª∑
            </button>
            <button type="submit" disabled={isSubmitting || content.trim().length < 10} className="px-5 py-2.5 rounded-xl font-semibold text-base text-white bg-blue-600 dark:bg-blue-900 hover:bg-blue-700 dark:hover:bg-blue-800 disabled:opacity-60 disabled:cursor-not-allowed">
              {isSubmitting ? 'ƒêang g·ª≠i...' : 'G·ª≠i ph·∫£n h·ªìi'}
            </button>
          </footer>
        </form>
      </div>
    </div>
  );
};

const categoryMap: Record<GeneralFeedbackCategory, string> = {
    bug: 'B√°o l·ªói',
    suggestion: 'G√≥p √Ω',
    content: 'N·ªôi dung',
    other: 'Kh√°c',
};

const categoryColorMap: Record<GeneralFeedbackCategory, string> = {
    bug: 'text-red-600 bg-red-50 dark:bg-red-900/50 dark:text-red-400',
    suggestion: 'text-blue-600 bg-blue-50 dark:bg-blue-900/50 dark:text-blue-400',
    content: 'text-yellow-600 bg-yellow-50 dark:bg-yellow-900/50 dark:text-yellow-400',
    other: 'text-slate-600 bg-slate-100 dark:bg-slate-700 dark:text-slate-300',
};

const FeedbackLogPanel: React.FC<{ log: GeneralFeedback[]; onClose: () => void }> = ({ log, onClose }) => {
    return (
        <div className="fixed inset-0 bg-black/30 z-50 flex justify-center items-center p-4" onClick={onClose}>
            <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl w-full max-w-5xl max-h-[80vh] flex flex-col" onClick={e => e.stopPropagation()}>
                <header className="moet-header p-5 flex justify-between items-center rounded-t-2xl">
                    <h2 className="text-lg font-bold">L·ªãch s·ª≠ ph·∫£n h·ªìi</h2>
                    <button onClick={onClose} className="text-white/80 hover:text-white text-2xl leading-none">&times;</button>
                </header>
                <div className="p-5 overflow-y-auto">
                    {log.length === 0 ? (
                        <p className="text-center text-slate-500 dark:text-slate-400 py-12 text-lg">Ch∆∞a c√≥ ph·∫£n h·ªìi n√†o ƒë∆∞·ª£c g·ª≠i.</p>
                    ) : (
                        <table className="w-full text-base text-left">
                            <thead className="bg-slate-100 dark:bg-slate-700">
                                <tr>
                                    <th className="p-3 w-1/4 text-slate-800 dark:text-slate-200">Th·ªùi gian</th>
                                    <th className="p-3 w-1/6 text-slate-800 dark:text-slate-200">Ph√¢n lo·∫°i</th>
                                    <th className="p-3 text-slate-800 dark:text-slate-200">N·ªôi dung</th>
                                </tr>
                            </thead>
                            <tbody>
                                {log.slice().reverse().map(item => (
                                    <tr key={item.id} className="border-b border-slate-200 dark:border-slate-700">
                                        <td className="p-3 text-sm text-slate-500 dark:text-slate-400 align-top">{new Date(item.timestamp).toLocaleString()}</td>
                                        <td className="p-3 align-top">
                                            <span className={`px-2.5 py-1 rounded-full font-semibold text-xs ${categoryColorMap[item.category]}`}>
                                                {categoryMap[item.category]}
                                            </span>
                                        </td>
                                        <td className="p-3 text-slate-700 dark:text-slate-300 whitespace-pre-wrap break-words">{item.content}</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    )}
                </div>
            </div>
        </div>
    );
};

const HistoryPanel: React.FC<{
    sessions: Session[];
    onClose: () => void;
    onLoad: (sessionId: string) => void;
    onDelete: (sessionId: string) => void;
}> = ({ sessions, onClose, onLoad, onDelete }) => {
    return (
        <div className="fixed inset-0 bg-black/30 z-50 flex justify-center items-center p-4" onClick={onClose}>
            <div className="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl w-full max-w-3xl max-h-[80vh] flex flex-col" onClick={e => e.stopPropagation()}>
                <header className="moet-header p-5 flex justify-between items-center rounded-t-2xl">
                    <h2 className="text-lg font-bold">L·ªãch s·ª≠ 5 phi√™n g·∫ßn nh·∫•t</h2>
                    <button onClick={onClose} className="text-white/80 hover:text-white text-2xl leading-none">&times;</button>
                </header>
                <div className="p-5 overflow-y-auto">
                    {sessions.length === 0 ? (
                        <p className="text-center text-slate-500 dark:text-slate-400 py-12 text-lg">Ch∆∞a c√≥ phi√™n n√†o ƒë∆∞·ª£c l∆∞u.</p>
                    ) : (
                        <ul className="space-y-3">
                            {sessions.map(session => (
                                <li key={session.id} className="p-4 bg-slate-50 dark:bg-slate-700/50 rounded-xl border border-slate-200 dark:border-slate-700 flex items-center justify-between gap-4">
                                    <div className="flex-1 min-w-0">
                                        <p className="text-sm text-slate-500 dark:text-slate-400">{new Date(session.timestamp).toLocaleString()}</p>
                                        <p className="text-base font-semibold text-slate-800 dark:text-slate-200 truncate">
                                            L·ªõp {session.grade}: {session.problem.substring(0, 80) || '(B√†i to√°n h√¨nh ·∫£nh)'}...
                                        </p>
                                    </div>
                                    <div className="flex-shrink-0 flex gap-2">
                                        <button onClick={() => onLoad(session.id)} className="p-2 text-slate-600 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-600 hover:text-blue-600 dark:hover:text-blue-400" title="T·∫£i l·∫°i phi√™n n√†y">
                                            <Download className="w-5 h-5" />
                                        </button>
                                        <button onClick={() => onDelete(session.id)} className="p-2 text-slate-600 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-600 hover:text-red-600 dark:hover:text-red-500" title="X√≥a phi√™n n√†y">
                                            <Trash2 className="w-5 h-5" />
                                        </button>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    )}
                </div>
            </div>
        </div>
    );
};


const AppHeader: React.FC<{
    onShowFeedbackLog: () => void;
    onShowAnalytics: () => void;
    onShowHistory: () => void;
    theme: 'light' | 'dark';
    setTheme: (theme: 'light' | 'dark') => void;
    fontSize: FontSize;
    setFontSize: (size: FontSize) => void;
}> = ({ onShowFeedbackLog, onShowAnalytics, onShowHistory, theme, setTheme, fontSize, setFontSize }) => {
    const [isFontMenuOpen, setIsFontMenuOpen] = useState(false);
    const fontMenuRef = useRef<HTMLDivElement>(null);

    const toggleTheme = () => {
        setTheme(theme === 'light' ? 'dark' : 'light');
    };
    
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (fontMenuRef.current && !fontMenuRef.current.contains(event.target as Node)) {
                setIsFontMenuOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);
    
    return (
        <header className="moet-header sticky top-0 z-30">
            <div className="max-w-7xl mx-auto px-4 flex items-center justify-between h-16">
                <div className="flex items-center gap-3">
                    <AssistantIcon className="w-12 h-12" />
                    <div>
                        <h1 className="text-base sm:text-lg font-bold">TR·ª¢ L√ù T∆Ø DUY TO√ÅN H·ªåC ‚Äì KH·ªêI TRUNG H·ªåC C∆† S·ªû</h1>
                        <p className="moet-subtle hidden sm:block">C√πng hi·ªÉu ‚Äì c√πng nghƒ© ‚Äì c√πng kh√°m ph√°</p>
                    </div>
                </div>
                <div className="flex items-center gap-1">
                    <div className="relative">
                        <button
                            onClick={() => setIsFontMenuOpen(prev => !prev)}
                            className="p-2 text-white/80 hover:text-white hover:bg-black/10 rounded-full"
                            aria-label="Thay ƒë·ªïi c·ª° ch·ªØ"
                            title="Thay ƒë·ªïi c·ª° ch·ªØ"
                        >
                            <FontSizeIcon className="w-5 h-5" />
                        </button>
                        {isFontMenuOpen && (
                            <div ref={fontMenuRef} className="absolute right-0 mt-2 w-40 bg-white dark:bg-slate-800 rounded-xl shadow-2xl border border-slate-200 dark:border-slate-700 p-2 z-10">
                                <p className="text-sm font-semibold text-slate-600 dark:text-slate-300 px-2 py-1 mb-1">C·ª° ch·ªØ</p>
                                <button onClick={() => { setFontSize('sm'); setIsFontMenuOpen(false); }} className={`w-full text-left px-3 py-2 rounded-md text-base text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 ${fontSize === 'sm' ? 'font-bold bg-slate-100 dark:bg-slate-700' : ''}`}>Nh·ªè</button>
                                <button onClick={() => { setFontSize('base'); setIsFontMenuOpen(false); }} className={`w-full text-left px-3 py-2 rounded-md text-base text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 ${fontSize === 'base' ? 'font-bold bg-slate-100 dark:bg-slate-700' : ''}`}>V·ª´a</button>
                                <button onClick={() => { setFontSize('lg'); setIsFontMenuOpen(false); }} className={`w-full text-left px-3 py-2 rounded-md text-base text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 ${fontSize === 'lg' ? 'font-bold bg-slate-100 dark:bg-slate-700' : ''}`}>L·ªõn</button>
                            </div>
                        )}
                    </div>
                    <button
                        onClick={toggleTheme}
                        className="p-2 text-white/80 hover:text-white hover:bg-black/10 rounded-full"
                        aria-label="Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô s√°ng/t·ªëi"
                        title="Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô s√°ng/t·ªëi"
                    >
                        {theme === 'light' ? <MoonIcon className="w-5 h-5" /> : <SunIcon className="w-5 h-5" />}
                    </button>
                    <button
                        onClick={onShowHistory}
                        className="p-2 text-white/80 hover:text-white hover:bg-black/10 rounded-full"
                        aria-label="Xem l·ªãch s·ª≠ phi√™n"
                        title="Xem l·ªãch s·ª≠ phi√™n h·ªçc"
                    >
                        <History className="w-5 h-5" />
                    </button>
                    <button
                        onClick={onShowFeedbackLog}
                        className="p-2 text-white/80 hover:text-white hover:bg-black/10 rounded-full"
                        aria-label="Xem l·ªãch s·ª≠ ph·∫£n h·ªìi"
                        title="Xem l·ªãch s·ª≠ ph·∫£n h·ªìi"
                    >
                        <ListChecks className="w-5 h-5" />
                    </button>
                    <button
                        onClick={onShowAnalytics}
                        className="p-2 text-white/80 hover:text-white hover:bg-black/10 rounded-full"
                        aria-label="Xem ph√¢n t√≠ch"
                        title="Xem ph√¢n t√≠ch g·ª£i √Ω"
                    >
                        <ChartBar className="w-5 h-5" />
                    </button>
                </div>
            </div>
        </header>
    );
};

const App: React.FC = () => {
  const usePersistentState = <T,>(key: string, defaultValue: T): [T, React.Dispatch<React.SetStateAction<T>>] => {
    const [state, setState] = useState<T>(() => {
      try {
        const storedValue = localStorage.getItem(key);
        return storedValue ? JSON.parse(storedValue) : defaultValue;
      } catch (error) {
        console.error("Error reading from localStorage", error);
        return defaultValue;
      }
    });
  
    useEffect(() => {
      try {
        localStorage.setItem(key, JSON.stringify(state));
      } catch (error) {
        console.error("Error writing to localStorage", error);
      }
    }, [key, state]);
  
    return [state, setState];
  };

  const [grade, setGrade] = usePersistentState<Grade>('math-app-grade', '6');
  const [level, setLevel] = usePersistentState<HintLevel>('math-app-level', 'light');
  const [mode, setMode] = usePersistentState<Mode>('math-app-mode', 'guide');
  const [problem, setProblem] = usePersistentState<string>('math-app-problem', '');
  const [studentStep, setStudentStep] = usePersistentState<string>('math-app-studentStep', '');
  const [images, setImages] = usePersistentState<string[]>('math-app-images', []);
  const [imageMimeTypes, setImageMimeTypes] = usePersistentState<string[]>('math-app-imageMimeTypes', []);
  const [studentImages, setStudentImages] = usePersistentState<string[]>('math-app-studentImages', []);
  const [studentImageMimeTypes, setStudentImageMimeTypes] = usePersistentState<string[]>('math-app-studentImageMimeTypes', []);
  const [conversation, setConversation] = usePersistentState<Message[]>('math-app-conversation', [WELCOME_MESSAGE]);
  const [feedbackLog, setFeedbackLog] = usePersistentState<FeedbackEvent[]>('math-app-feedback-log', []);
  const [isProblemActive, setIsProblemActive] = usePersistentState<boolean>('math-app-isProblemActive', false);
  const [generalFeedbackLog, setGeneralFeedbackLog] = usePersistentState<GeneralFeedback[]>('math-app-general-feedback-log', []);
  const [sessionHistory, setSessionHistory] = usePersistentState<Session[]>('math-app-session-history', []);
  
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [showAnalytics, setShowAnalytics] = useState<boolean>(false);
  const [showFeedbackModal, setShowFeedbackModal] = useState<boolean>(false);
  const [showFeedbackLog, setShowFeedbackLog] = useState<boolean>(false);
  const [showHistory, setShowHistory] = useState<boolean>(false);
  const [lightboxImageSrc, setLightboxImageSrc] = useState<string | null>(null);
  const [theme, setTheme] = useTheme();
  const [fontSize, setFontSize] = usePersistentState<FontSize>('math-app-fontSize', 'base');

  useEffect(() => {
    const htmlElement = document.documentElement;
    htmlElement.classList.remove('font-size-sm', 'font-size-base', 'font-size-lg');
    htmlElement.classList.add(`font-size-${fontSize}`);
  }, [fontSize]);

  // Per user request, re-render KaTeX globally on conversation updates
  // to ensure all math expressions are displayed correctly.
  useEffect(() => {
    const renderMathInElement = (window as any)?.renderMathInElement;
    if (typeof renderMathInElement === "function") {
      renderMathInElement(document.body, {
        delimiters: [
          { left: "$$", right: "$$", display: true },
          { left: "$",  right: "$",  display: false },
          { left: "\\(", right: "\\)", display: false },
          { left: "\\[", right: "\\]", display: true }
        ],
        throwOnError: false
      });
    }
  }, [conversation]);

  // Use a ref to get the latest state inside callbacks without re-creating them
  const stateRef = useRef({ grade, level, mode, problem, studentStep, images, imageMimeTypes, studentImages, studentImageMimeTypes, conversation });
  useEffect(() => {
    stateRef.current = { grade, level, mode, problem, studentStep, images, imageMimeTypes, studentImages, studentImageMimeTypes, conversation };
  }, [grade, level, mode, problem, studentStep, images, imageMimeTypes, studentImages, studentImageMimeTypes, conversation]);

  
  interface AddMessageOptions {
    suggestion?: Message['suggestion'];
    images?: string[];
    imageMimeTypes?: string[];
    isGuidance?: boolean;
    guidanceContext?: GuidanceContext;
  }

  const addMessage = useCallback((role: 'user' | 'assistant', content: string, options: AddMessageOptions = {}) => {
    setConversation(prev => [...prev, {
      id: crypto.randomUUID(),
      role,
      content,
      suggestion: options.suggestion,
      images: options.images,
      imageMimeTypes: options.imageMimeTypes,
      isGuidance: options.isGuidance,
      feedback: options.isGuidance ? 'unanswered' : undefined,
      guidanceContext: options.isGuidance ? options.guidanceContext : undefined,
    }]);
  }, [setConversation]);

  const handleApiError = useCallback((e: any) => {
    console.error("Gemini API Error:", e);
    let errorMessage = "R·∫•t ti·∫øc, ƒë√£ c√≥ s·ª± c·ªë x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa em. Vui l√≤ng th·ª≠ l·∫°i sau nh√©.";
    if (e && e.message) {
        const lowerCaseMessage = String(e.message).toLowerCase();
        if (lowerCaseMessage.includes('429') || lowerCaseMessage.includes('rate limit')) {
            errorMessage = "H·ªá th·ªëng ƒëang h∆°i qu√° t·∫£i m·ªôt ch√∫t. Em vui l√≤ng ƒë·ª£i v√†i ph√∫t r·ªìi th·ª≠ l·∫°i nh√©.";
        }
    }
    addMessage('assistant', errorMessage);
  }, [addMessage]);

  const handleClear = useCallback(() => {
    const confirmationMessage = 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫Øt ƒë·∫ßu l·∫°i kh√¥ng? Phi√™n l√†m vi·ªác hi·ªán t·∫°i s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o l·ªãch s·ª≠ (n·∫øu c√≥ n·ªôi dung), v√† to√†n b·ªô m√†n h√¨nh s·∫Ω ƒë∆∞·ª£c xo√°.';
    if (window.confirm(confirmationMessage)) {
      if (isProblemActive && (problem.trim().length > 0 || images.length > 0) && conversation.length > 2) {
          const currentSession: Session = {
              id: crypto.randomUUID(),
              timestamp: Date.now(),
              grade, level, mode, problem, studentStep, images, imageMimeTypes,
              studentImages, studentImageMimeTypes, conversation, feedbackLog, isProblemActive
          };
          
          setSessionHistory(prev => {
              const updatedHistory = [currentSession, ...prev];
              if (updatedHistory.length > 5) {
                  return updatedHistory.slice(0, 5);
              }
              return updatedHistory;
          });
      }

      setIsLoading(false);
      setGrade('6');
      setLevel('light');
      setMode('guide');
      setProblem('');
      setStudentStep('');
      setImages([]);
      setImageMimeTypes([]);
      setStudentImages([]);
      setStudentImageMimeTypes([]);
      setConversation([WELCOME_MESSAGE]);
      setFeedbackLog([]);
      setIsProblemActive(false);
    }
  }, [isProblemActive, problem, images, conversation, grade, level, mode, studentStep, imageMimeTypes, studentImages, studentImageMimeTypes, feedbackLog, setSessionHistory, setGrade, setLevel, setMode, setProblem, setStudentStep, setImages, setImageMimeTypes, setStudentImages, setStudentImageMimeTypes, setConversation, setFeedbackLog, setIsProblemActive]);
  
  const handleAsk = useCallback(async () => {
    const currentState = stateRef.current;
    const currentGrade = currentState.grade;

    // Check for empty problem only if studentStep is also empty
    if (!currentState.problem && currentState.images.length === 0 && !currentState.studentStep && currentState.studentImages.length === 0) {
        alert("Nh·∫≠p ƒë·ªÅ b√†i ho·∫∑c c√¢u tr·∫£ l·ªùi c·ªßa em ƒë·ªÉ b·∫Øt ƒë·∫ßu.");
        return;
    }
    
    setIsLoading(true);
    
    // Add user message to conversation
    const userPromptParts = [];
    if (!isProblemActive) {
      userPromptParts.push(`**L·ªõp ${currentGrade}** | ${currentState.level.toUpperCase()} | ${currentState.mode.toUpperCase()}`);
    }
    if (currentState.problem && !isProblemActive) userPromptParts.push(`**ƒê·ªÅ:** ${currentState.problem}`);
    else if (currentState.images.length > 0 && !isProblemActive) userPromptParts.push(`**ƒê·ªÅ:**`);

    if (currentState.studentStep) userPromptParts.push(isProblemActive ? currentState.studentStep : `**C√¢u tr·∫£ l·ªùi c·ªßa em:** ${currentState.studentStep}`);
    else if (currentState.studentImages.length > 0) userPromptParts.push(isProblemActive ? "" : `**C√¢u tr·∫£ l·ªùi c·ªßa em:**`);

    const userPrompt = userPromptParts.filter(p => p).join("\n\n");
    const allImages = [...(isProblemActive ? [] : currentState.images), ...currentState.studentImages];
    const allMimeTypes = [...(isProblemActive ? [] : currentState.imageMimeTypes), ...currentState.studentImageMimeTypes];
    addMessage('user', userPrompt, { images: allImages, imageMimeTypes: allMimeTypes });
    
    // Client-side formula intent detection
    if (currentState.studentStep) {
        const formulaHint = detectFormulaIntent(currentState.studentStep);
        if (formulaHint) {
            setTimeout(() => {
                addMessage('assistant', formulaHint);
                setIsLoading(false);
            }, 500); // Simulate a quick response
            setStudentStep('');
            setStudentImages([]);
            setStudentImageMimeTypes([]);
            return;
        }
    }

    if (!isProblemActive) {
        setIsProblemActive(true);
    }
    
    // Clear student input fields after submission
    setStudentStep('');
    setStudentImages([]);
    setStudentImageMimeTypes([]);

    try {
        let tags = roughDetectTags(currentState.problem);
        if (tags.length === 0 && (currentState.problem || currentState.images.length > 0)) {
            tags = await classifyProblem(currentState.problem, currentState.images, currentState.imageMimeTypes);
        }
        const compliance: ComplianceResult = checkCompliance(currentGrade, tags);
        
        if (!compliance.ok) {
            const messageContent = `‚ö†Ô∏è **C√¥ th·∫•y b√†i n√†y c√≥ ki·∫øn th·ª©c c·ªßa l·ªõp cao h∆°n** (c·ª• th·ªÉ l√† v·ªÅ **${compliance.reason}**), kh√¥ng thu·ªôc ch∆∞∆°ng tr√¨nh l·ªõp ${currentGrade} em nh√©.`;
            if (compliance.suggestedGrades && compliance.suggestedGrades.length > 0) {
              addMessage(
                'assistant',
                `${messageContent} Em c√≥ mu·ªën t·ª± ƒë·ªông chuy·ªÉn sang l·ªõp ph√π h·ª£p ƒë·ªÉ c√¥ h∆∞·ªõng d·∫´n kh√¥ng?`,
                { suggestion: { type: 'CHANGE_GRADE', suggestedGrades: compliance.suggestedGrades } }
              );
            } else {
              addMessage('assistant', `${messageContent} Em vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªÅ b√†i ho·∫∑c ch·ªçn l·∫°i l·ªõp cho ƒë√∫ng nh√©.`);
            }
            setIsLoading(false);
            return;
        }

        const baseParams = {
            grade: currentGrade,
            level: currentState.level,
            mode: currentState.mode,
            problem: currentState.problem,
            studentStep: stateRef.current.studentStep, // Use the latest from ref just in case, though it was just cleared
            image: currentState.images,
            imageMimeType: currentState.imageMimeTypes,
            studentImages: stateRef.current.studentImages,
            studentImageMimeTypes: stateRef.current.studentImageMimeTypes,
            tags,
            compliance
        };

        const response = await getGuidance(baseParams);

        const guidanceContext: GuidanceContext = {
            problem: currentState.problem,
            image: currentState.images,
            imageMimeType: currentState.imageMimeTypes,
            grade: currentGrade,
            tags
        };
        
        let isActualGuidance = (currentState.mode === 'guide' || currentState.mode === 'check') && compliance.ok;

        const rejectionKeywords = ["ch∆∞a ph√π h·ª£p", "l·ªõp cao h∆°n", "l·ªõp tr√™n", "kh√¥ng thu·ªôc ch∆∞∆°ng tr√¨nh", "ch·ªçn l·∫°i kh·ªëi l·ªõp", "ki·∫øn th·ª©c c·ªßa l·ªõp"];
        if (isActualGuidance && rejectionKeywords.some(keyword => response.toLowerCase().includes(keyword))) {
            isActualGuidance = false;
        }

        addMessage('assistant', response, {
            isGuidance: isActualGuidance,
            guidanceContext: isActualGuidance ? guidanceContext : undefined,
        });

    } catch (e) {
        handleApiError(e);
    } finally {
        setIsLoading(false);
    }
  }, [addMessage, setIsProblemActive, setStudentStep, setStudentImages, setStudentImageMimeTypes, handleApiError, isProblemActive]);
  
  const handleSuggestionAction = useCallback((grade: Grade) => {
    setGrade(grade);
    addMessage('assistant', `‚úÖ ƒê√£ chuy·ªÉn sang L·ªõp ${grade}. Em h√£y nh·∫•n "L·∫•y g·ª£i √Ω" l·∫°i nh√©.`);
  }, [setGrade, addMessage]);

  const handleFeedback = useCallback(async (messageId: string, status: FeedbackStatus) => {
    const originalMessage = stateRef.current.conversation.find(msg => msg.id === messageId);
    if (!originalMessage || !originalMessage.guidanceContext) return;

    setFeedbackLog(prev => [...prev, {
        id: crypto.randomUUID(),
        messageId,
        timestamp: Date.now(),
        grade: originalMessage.guidanceContext?.grade || 'N/A',
        problem: originalMessage.guidanceContext?.problem || '(·∫£nh)',
        status,
    }]);

    setConversation(prev =>
        prev.map(msg =>
            msg.id === messageId ? { ...msg, feedback: status } : msg
        )
    );
    
    if ((status === 'needs_more' || status === 'too_hard')) {
        setIsLoading(true);
        const userMessage = status === 'needs_more' ? 'ü§î Em v·∫´n ch∆∞a hi·ªÉu, c·∫ßn th√™m g·ª£i √Ω ·∫°.' : 'üò• Kh√≥ qu√°, c√¥ c√≥ th·ªÉ gi·∫£i th√≠ch ƒë∆°n gi·∫£n h∆°n kh√¥ng?';
        addMessage('user', userMessage);
        
        try {
            const response = await getGuidance({
                ...originalMessage.guidanceContext,
                studentImages: [],
                studentImageMimeTypes: [],
                level: 'light', 
                mode: 'guide',
                studentStep: '',
                compliance: { ok: true, reason: '' },
                feedback: status,
            });
            
            addMessage('assistant', response, {
                isGuidance: true,
                guidanceContext: originalMessage.guidanceContext,
            });

        } catch (e) {
            handleApiError(e);
        } finally {
            setIsLoading(false);
        }
    }
  }, [addMessage, setConversation, setFeedbackLog, handleApiError]);

  const handleRequestSimilar = useCallback(async (context: GuidanceContext) => {
    if (!context) return;

    const compliance = checkCompliance(context.grade, context.tags);
    if (!compliance.ok) {
        addMessage('assistant', `B√†i to√°n g·ªëc thu·ªôc ch·ªß ƒë·ªÅ ${context.tags.join(', ')}, kh√¥ng ph√π h·ª£p v·ªõi L·ªõp ${context.grade}. V√¨ v·∫≠y, c√¥ kh√¥ng th·ªÉ t·∫°o b√†i t∆∞∆°ng t·ª±. Em h√£y b·∫Øt ƒë·∫ßu l·∫°i v·ªõi m·ªôt b√†i to√°n kh√°c nh√©.`);
        return;
    }

    setIsLoading(true);
    addMessage('user', "üí° Em mu·ªën luy·ªán th√™m b√†i t∆∞∆°ng t·ª±.");

    try {
        const response = await getGuidance({
            ...context,
            studentImages: [],
            studentImageMimeTypes: [],
            level: 'light', 
            mode: 'similar',
            studentStep: '',
            compliance: compliance,
        });
        addMessage('assistant', response);
    } catch (e) {
        handleApiError(e);
    } finally {
        setIsLoading(false);
    }
  }, [addMessage, handleApiError]);
  
  const handleSendGeneralFeedback = useCallback((category: GeneralFeedbackCategory, content: string) => {
    const newFeedback: GeneralFeedback = {
        id: crypto.randomUUID(),
        timestamp: Date.now(),
        category,
        content,
    };
    setGeneralFeedbackLog(prev => [...prev, newFeedback]);
    setShowFeedbackModal(false);
  }, [setGeneralFeedbackLog]);

  const handleLoadSession = useCallback((sessionId: string) => {
      const sessionToLoad = sessionHistory.find(s => s.id === sessionId);
      if (sessionToLoad) {
          setGrade(sessionToLoad.grade);
          setLevel(sessionToLoad.level);
          setMode(sessionToLoad.mode);
          setProblem(sessionToLoad.problem);
          setStudentStep(sessionToLoad.studentStep);
          setImages(sessionToLoad.images);
          setImageMimeTypes(sessionToLoad.imageMimeTypes);
          setStudentImages(sessionToLoad.studentImages);
          setStudentImageMimeTypes(sessionToLoad.studentImageMimeTypes);
          setConversation(sessionToLoad.conversation);
          setFeedbackLog(sessionToLoad.feedbackLog);
          setIsProblemActive(sessionToLoad.isProblemActive);
          setShowHistory(false);
      }
  }, [sessionHistory, setGrade, setLevel, setMode, setProblem, setStudentStep, setImages, setImageMimeTypes, setStudentImages, setStudentImageMimeTypes, setConversation, setFeedbackLog, setIsProblemActive]);

  const handleDeleteSession = useCallback((sessionId: string) => {
      if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a phi√™n h·ªçc n√†y kh√¥ng?')) {
          setSessionHistory(prev => prev.filter(s => s.id !== sessionId));
      }
  }, [setSessionHistory]);
  
  const handleImageClick = (src: string) => {
    setLightboxImageSrc(src);
  };

  return (
    <div className="min-h-screen flex flex-col">
       <AppHeader 
        onShowFeedbackLog={() => setShowFeedbackLog(true)}
        onShowAnalytics={() => setShowAnalytics(true)}
        onShowHistory={() => setShowHistory(true)}
        theme={theme}
        setTheme={setTheme}
        fontSize={fontSize}
        setFontSize={setFontSize}
      />
      
      <div className="max-w-4xl w-full mx-auto px-4 pt-8">
        <div className="bg-blue-50 dark:bg-slate-800 border border-blue-200 dark:border-slate-700 rounded-2xl p-6 shadow-md mb-8">
            <div className="text-base text-slate-700 dark:text-slate-300 space-y-3 leading-relaxed text-justify">
                <p>
                    ·ª®ng d·ª•ng ƒë∆∞·ª£c s√°ng t·∫°o b·ªüi <strong>C√¥ TƒÉng Th·ªã H·ªìng Th·∫Øm</strong>.
                </p>
                <p>
                    Gi√°o vi√™n To√°n THCS v·ªõi h∆°n 20 nƒÉm kinh nghi·ªám gi·∫£ng d·∫°y v√† nghi√™n c·ª©u ƒë·ªïi m·ªõi ph∆∞∆°ng ph√°p h·ªçc To√°n, ƒë·ªìng h√†nh c√πng h·ªçc sinh r√®n luy·ªán t∆∞ duy logic, kh·∫£ nƒÉng suy lu·∫≠n v√† t·ª± h·ªçc th√¥ng qua nh·ªØng c√¢u h·ªèi g·ª£i m·ªü, thay v√¨ ch·ªâ ghi nh·ªõ l·ªùi gi·∫£i c√≥ s·∫µn.
                </p>
                <p>
                    "<strong>TR·ª¢ L√ù T∆Ø DUY TO√ÅN H·ªåC ‚Äì KH·ªêI TRUNG H·ªåC C∆† S·ªû</strong>" l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh, gi√∫p c√°c em hi·ªÉu b·∫£n ch·∫•t, t·ª± tin v√† t√¨m th·∫•y ni·ªÅm vui trong To√°n h·ªçc n∆°i m·ªói b√†i t·∫≠p l√† m·ªôt h√†nh tr√¨nh kh√°m ph√° tri th·ª©c. N·ªôi dung ki·∫øn th·ª©c ƒë∆∞·ª£c thi·∫øt k·∫ø theo chu·∫©n ch∆∞∆°ng tr√¨nh GDPT 2018.
                </p>
            </div>
        </div>
      </div>

      <main className="flex-grow max-w-7xl w-full mx-auto p-4 grid grid-cols-1 lg:grid-cols-[400px_1fr] gap-6">
        <InputPanel
          grade={grade}
          setGrade={setGrade}
          level={level}
          setLevel={setLevel}
          mode={mode}
          setMode={setMode}
          problem={problem}
          setProblem={setProblem}
          studentStep={studentStep}
          setStudentStep={setStudentStep}
          images={images}
          setImages={setImages}
          setImageMimeTypes={setImageMimeTypes}
          imageMimeTypes={imageMimeTypes}
          studentImages={studentImages}
          setStudentImages={setStudentImages}
          studentImageMimeTypes={studentImageMimeTypes}
          setStudentImageMimeTypes={setStudentImageMimeTypes}
          onAsk={handleAsk}
          onClear={handleClear}
          isLoading={isLoading}
          isProblemActive={isProblemActive}
        />
        <ChatPanel 
          conversation={conversation} 
          isLoading={isLoading} 
          onSuggestionAction={handleSuggestionAction}
          onFeedback={handleFeedback}
          onRequestSimilar={handleRequestSimilar}
          onImageClick={handleImageClick}
        />
      </main>
      
      <footer className="moet-footer mt-8">
          <p>¬© TƒÇNG TH·ªä H·ªíNG TH·∫ÆM ‚Äì 2025 | VER 1.0 | ALL RIGHTS RESERVED</p>
          <p>Tr∆∞·ªùng THCS L·∫°c Long Qu√¢n | 1014/88/9 T√¢n K·ª≥ T√¢n Qu√Ω, ph∆∞·ªùng B√¨nh H∆∞ng H√≤a, TP. H·ªì Ch√≠ Minh</p>
          <p>·ª®ng d·ª•ng thu·ªôc cu·ªôc thi ‚ÄúNh√† gi√°o s√°ng t·∫°o v·ªõi c√¥ng ngh·ªá s·ªë v√† tr√≠ tu·ªá nh√¢n t·∫°o‚Äù.</p>
      </footer>

      <button
        onClick={() => setShowFeedbackModal(true)}
        className="fixed bottom-4 right-4 bg-blue-600 dark:bg-blue-900 text-white rounded-full p-3 shadow-lg hover:bg-blue-700 dark:hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 z-40 transition-colors duration-200"
        aria-label="G·ª≠i ph·∫£n h·ªìi"
        title="G·ª≠i ph·∫£n h·ªìi, b√°o l·ªói ho·∫∑c g√≥p √Ω"
    >
        <MessageSquareWarning className="w-6 h-6" />
    </button>
      
      {showHistory && <HistoryPanel sessions={sessionHistory} onClose={() => setShowHistory(false)} onLoad={handleLoadSession} onDelete={handleDeleteSession} />}
      {showAnalytics && <AnalyticsPanel log={feedbackLog} onClose={() => setShowAnalytics(false)} />}
      {showFeedbackLog && <FeedbackLogPanel log={generalFeedbackLog} onClose={() => setShowFeedbackLog(false)} />}
      {showFeedbackModal && <FeedbackModal onClose={() => setShowFeedbackModal(false)} onSubmit={handleSendGeneralFeedback} />}
      {lightboxImageSrc && <Lightbox src={lightboxImageSrc} onClose={() => setLightboxImageSrc(null)} />}
    </div>
  );
};

export default App;